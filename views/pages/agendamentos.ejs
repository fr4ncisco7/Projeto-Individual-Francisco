<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Agendamentos - Edifício Arara Azul</title>
  <link rel="stylesheet" href="/css/agendamento.css">
</head>
<body>
  <div class="app-container">
    <header class="app-header">
      <h1>Sistema de Agendamento</h1>
      <h2>Edifício Arara Azul</h2>
      <nav>
        <ul>
          <li><a href="/agendamentos" class="active">Agendamentos</a></li>
        </ul>
      </nav>
    </header>

    <main class="content">
      <div class="agendamento-container">
        <!-- Salas disponíveis -->
        <div class="salas-container">
          <div class="sala-card">
            <div class="sala-icon">
              <img src="/images/sala1.png" alt="Sala 1">
            </div>
            <div class="sala-nome">Sala 1</div>
          </div>
          
          <div class="sala-card">
            <div class="sala-icon">
              <img src="/images/sala2.png" alt="Sala 2">
            </div>
            <div class="sala-nome">Sala 2</div>
          </div>
          
          <div class="sala-card">
            <div class="sala-icon">
              <img src="/images/sala3.png" alt="Sala 3">
            </div>
            <div class="sala-nome">Sala 3</div>
          </div>
        </div>
        
        <!-- Calendário -->
        <div class="calendario-container">
          <div class="calendario-header">
            <button class="btn-nav prev">&lt;</button>
            <div class="mes-ano">Abril de ano 2025</div>
            <button class="btn-nav next">&gt;</button>
          </div>
          
          <div class="calendario-dias-semana">
            <div>Dom</div>
            <div>Seg</div>
            <div>Ter</div>
            <div>Qua</div>
            <div>Qui</div>
            <div>Sex</div>
            <div>Sab</div>
          </div>
          
          <div class="calendario-dias">
            <!-- Os dias serão gerados via JavaScript -->
          </div>
          
          <div class="calendario-footer">
            <img src="/images/folha.png" alt="Imagem da folha">
            <img id="folhinha2" src="/images/folha.png" alt="Imagem da folha">
            <img id="folhinha3" src="/images/folha.png" alt="Imagem da folha">
          
          </div>
        </div>
        
        <!-- Horários de reserva -->
        <div class="horarios-container">
          <div class="horarios-titulo">
            <span class="horarios-icon">⚫</span>
            Horários de reservas
          </div>
          
          <div class="horarios-opcoes">
            <button class="horario-btn">00:00</button>
            <button class="horario-btn">04:00</button>
            <button class="horario-btn selected">08:00</button>
            <button class="horario-btn">12:00</button>
            <button class="horario-btn">16:00</button>
            <button class="horario-btn">20:00</button>
          </div>
        </div>
        
        <!-- Avisos -->
        <div class="avisos-container">
          <div class="avisos-titulo">Avisos</div>
          <div class="avisos-conteudo">
            <p>.Por questão de higiene é proibido comer nesse local</p>
            <p>.Mantenha o ambiente limpo</p>
            <p>.Em caso de descumprimento da norma sujeito a multa</p>
          </div>
        </div>
        
        <!-- Botão de continuar -->
        <div class="continuar-container">
          <button id="btn-continuar">Continuar</button>
        </div>
      </div>
    </main>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // Variáveis para controlar o mês e ano atual do calendário
      const hoje = new Date();
      let mesAtual = hoje.getMonth() + 1; // Mês atual
      let anoAtual = hoje.getFullYear(); // Ano atual
      
      // Gerar calendário inicial
      gerarCalendario(mesAtual, anoAtual);
      
      // Event listeners para botões de navegação do calendário
      document.querySelector('.btn-nav.prev').addEventListener('click', () => {
        // Navegar para o mês anterior
        mesAtual--;
        if (mesAtual < 1) {
          mesAtual = 12;
          anoAtual--;
        }
        gerarCalendario(mesAtual, anoAtual);
      });
      
      document.querySelector('.btn-nav.next').addEventListener('click', () => {
        // Navegar para o próximo mês
        mesAtual++;
        if (mesAtual > 12) {
          mesAtual = 1;
          anoAtual++;
        }
        gerarCalendario(mesAtual, anoAtual);
      });
      
      // Event listeners para seleção de sala
      document.querySelectorAll('.sala-card').forEach(sala => {
        sala.addEventListener('click', () => {
          document.querySelectorAll('.sala-card').forEach(s => s.classList.remove('selected'));
          sala.classList.add('selected');
        });
      });
      
      // NOVO: A linha carregarHorariosDisponiveis(0, 0, 0); foi removida/comentada
      // Pois o dia atual será selecionado automaticamente e isso disparará o carregamento dos horários.
      
      // Event listener para botão continuar
      document.getElementById('btn-continuar').addEventListener('click', () => {
        const salaSelected = document.querySelector('.sala-card.selected');
        const diaSelected = document.querySelector('.calendario-dia.selected');
        const horarioSelected = document.querySelector('.horario-btn.selected');
        
        if (!salaSelected || !diaSelected || !horarioSelected) {
          // NOVO: Substituição de alert() por uma mensagem na tela para melhor UX
          exibirMensagemErro('Por favor, selecione uma sala, um dia e um horário.');
          return;
        }
        
        const sala = salaSelected.querySelector('.sala-nome').textContent;
        const dia = diaSelected.textContent;
        const horario = horarioSelected.textContent;
        
        // Obter o mês e ano atual do calendário
        const mesNumero = mesAtual.toString().padStart(2, '0');
        
        // Redirecionar para a página de confirmação com os parâmetros
        window.location.href = `/confirmacaoAgendamento?sala=${encodeURIComponent(sala)}&dia=${dia}&mes=${mesNumero}&ano=${anoAtual}&horario=${encodeURIComponent(horario)}`;
      });
    });
    
    // Função para gerar o calendário
    function gerarCalendario(mes, ano) {
      const diasContainer = document.querySelector('.calendario-dias');
      const mesAnoElement = document.querySelector('.mes-ano');
      
      // Limpar o container de dias
      diasContainer.innerHTML = '';
      
      // Atualizar o título do mês e ano
      const nomeMes = getNomeMes(mes);
      mesAnoElement.textContent = `${nomeMes} de ${ano}`;
      
      // Calcular o primeiro e último dia do mês
      const primeiroDia = new Date(ano, mes - 1, 1);
      const ultimoDia = new Date(ano, mes, 0);
      const totalDias = ultimoDia.getDate();
      const primeiroDiaSemana = primeiroDia.getDay();
      
      // NOVO: Variáveis para controlar se o dia atual já foi marcado para seleção automática
      let diaAtualElemento = null;
      const hoje = new Date();
      const isMesAnoAtual = (hoje.getMonth() + 1 === mes && hoje.getFullYear() === ano);

      // Adicionar espaços vazios para os dias antes do primeiro dia do mês
      for (let i = 0; i < primeiroDiaSemana; i++) {
        const diaVazio = document.createElement('div');
        diaVazio.className = 'calendario-dia vazio';
        diasContainer.appendChild(diaVazio);
      }
      
      // Adicionar os dias do mês
      for (let i = 1; i <= totalDias; i++) {
        const diaElement = document.createElement('div');
        diaElement.className = 'calendario-dia';
        diaElement.textContent = i;
        
        // Verificar disponibilidade (chamada ao backend simulada por enquanto)
        const disponivel = verificarDisponibilidade(i, mes, ano);
        if (!disponivel) {
          diaElement.classList.add('indisponivel');
          diaElement.title = 'Indisponível para agendamento';
          diaElement.classList.add('horario-btn.indisponivel')
        } else {
          // Adicionar evento de clique apenas para dias disponíveis
          diaElement.addEventListener('click', () => {
            document.querySelectorAll('.calendario-dia').forEach(d => d.classList.remove('selected'));
            diaElement.classList.add('selected');
            
            // Carregar horários disponíveis para o dia selecionado
            carregarHorariosDisponiveis(i, mes, ano);
          });
        }
        
        // NOVO: Lógica para destacar e selecionar automaticamente o dia atual
        if (isMesAnoAtual && hoje.getDate() === i) {
          diaElement.classList.add('hoje'); // Estilo para o dia atual
          diaElement.classList.add('selected'); // Selecionar automaticamente
          diaAtualElemento = diaElement; // Armazenar referência para simular clique
        }
        
        diasContainer.appendChild(diaElement);
      }

      // NOVO: Se o mês e ano atual estão sendo exibidos, simular clique no dia de hoje
      // Isso força o carregamento dos horários disponíveis para o dia atual ao carregar a página.
      if (diaAtualElemento) {
        diaAtualElemento.click(); // Simula o clique para carregar horários e marcar
      }
    }

    // Função para obter o nome do mês a partir do número
    function getNomeMes(numeroMes) {
      const meses = [
        'Janeiro', 'Fevereiro', 'Março', 'Abril',
        'Maio', 'Junho', 'Julho', 'Agosto',
        'Setembro', 'Outubro', 'Novembro', 'Dezembro'
      ];
      return meses[numeroMes - 1];
    }

    // Função para verificar se um dia está disponível para agendamento
    function verificarDisponibilidade(dia, mes, ano) {
      // Verificar se a data já passou
      const hoje = new Date();
      const dataVerificar = new Date(ano, mes - 1, dia);
      
      // Se a data for anterior a hoje, não permite agendamento
      if (dataVerificar < new Date(hoje.getFullYear(), hoje.getMonth(), hoje.getDate())) {
        return false;
      }
      
      // Aqui faríamos uma chamada ao backend para verificar disponibilidade
      // Por enquanto, vamos simular com dados estáticos. 
      // Em uma implementação real, você faria um fetch para o seu endpoint /verificarDisponibilidade
      return true;
    }

    // Função para verificar se um horário está disponível para uma data específica
    function verificarHorarioDisponivel(hora, dia, mes, ano) {
      const hoje = new Date();
      const dataHoraVerificar = new Date(ano, mes - 1, dia, hora);
      const dataVerificar = new Date(ano, mes - 1, dia);
      const dataHoje = new Date(hoje.getFullYear(), hoje.getMonth(), hoje.getDate());
      
      // Se a data for anterior a hoje, não está disponível
      if (dataVerificar < dataHoje) {
        return false;
      }
      
      // Se a data for hoje, verificar se o horário já passou
      if (
        dataVerificar.getTime() === dataHoje.getTime() && 
        hora <= hoje.getHours()
      ) {
        return false;
      }
      
      // Se a data for futura, o horário está disponível (independente da hora)
      // Em uma implementação real, você faria um fetch para o seu endpoint /verificarDisponibilidade
      // passando sala_id, data, e hora, para checar a disponibilidade real do slot.
      return true;
    }

    // Função para carregar horários disponíveis para o dia selecionado
    function carregarHorariosDisponiveis(dia, mes, ano) {
      const horariosContainer = document.querySelector('.horarios-opcoes');
      horariosContainer.innerHTML = '';
      
      // Horários possíveis (em blocos de 4 horas)
      const horariosPossiveis = [0, 4, 8, 12, 16, 20];
      
      horariosPossiveis.forEach(hora => {
        const disponivel = verificarHorarioDisponivel(hora, dia, mes, ano);
        
        const horarioBtn = document.createElement('button');
        horarioBtn.className = 'horario-btn';
        horarioBtn.textContent = `${hora.toString().padStart(2, '0')}:00`;
        
        if (!disponivel) {
          horarioBtn.classList.add('indisponivel');
          horarioBtn.disabled = true;
          horarioBtn.title = 'Horário indisponível';
        } else {
          horarioBtn.addEventListener('click', () => {
            document.querySelectorAll('.horario-btn').forEach(h => h.classList.remove('selected'));
            horarioBtn.classList.add('selected');
          });
        }
        
        horariosContainer.appendChild(horarioBtn);
      });
    }

    // NOVO: Função para exibir mensagem de erro (substitui o alert())
    function exibirMensagemErro(mensagem) {
      // Você pode criar um modal, um toast, ou uma div simples para exibir a mensagem
      const mensagemDiv = document.createElement('div');
      mensagemDiv.className = 'mensagem-erro'; // Adiciona classe para estilização (CSS precisa ser definido em agendamento.css)
      mensagemDiv.textContent = mensagem;
      
      document.body.appendChild(mensagemDiv);

      setTimeout(() => {
        mensagemDiv.remove();
      }, 3000); // Remove a mensagem após 3 segundos
    }
  </script>
</body>
</html>